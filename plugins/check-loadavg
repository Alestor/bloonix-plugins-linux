#!/usr/bin/perl

=head1 NAME

check-loadavg - Plugin to check the load average.

=head1 SYNOPSIS

    check-loadavg [ OPTIONS ]

    check-loadavg --help

=head1 REPORTING BUGS

Please report all bugs to <support(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <support(at)bloonix.de>.

=head1 POWERED BY

     _    __ _____ _____ __  __ __ __   __
    | |__|  |     |     |  \|  |__|\  \/  /
    |  . |  |  |  |  |  |      |  | >    <
    |____|__|_____|_____|__|\__|__|/__/\__\

=head1 COPYRIGHT

Copyright (C) 2009-2014 by Jonny Schulz. All rights reserved.

=cut

use strict;
use warnings;
use Bloonix::Plugin;

# --------------------------------------------------
# Plugin options
# --------------------------------------------------

my $plugin = Bloonix::Plugin->new(version => "0.6");

$plugin->has_threshold(
    keys => [qw(avg1 avg5 avg15)]
);

$plugin->add_option(
    name => "Per CPU",
    option => "per-cpu",
    description => join(" ",
        "Enable this option if you want that the avg threshold is multiplicatied",
        "with the number of CPUs (threads). As example if your server has 8 threads",
        "and if you set avg1 to 4, then the threshold is 32 (8 * 4). The number of",
        "available CPUs is checked in /proc/stat (cpuN)."
    )
);

$plugin->example(
    description => [
        "An example to check the load average and trigger",
        "",
        "- a warning if avg1 or avg5 is equal or higher than 20",
        "- a critical if avg1 or avg5 is equal or higher than 50"
    ],
    arguments => [
        warning => "avg1:ge:20",
        critical => "avg1:ge:50",
        warning => "avg5:ge:20",
        critical => "avg5:ge:50"
    ]
);

# --------------------------------------------------
# Parse options
# --------------------------------------------------

my $opt = $plugin->parse_options;

# --------------------------------------------------
# Get CPU count
# --------------------------------------------------

my $factor = 0;

if ($opt->{per_cpu}) {
    open my $fh, "<", "/proc/stat" or $plugin->exit(
        status => "UNKNOWN",
        message => "cannot open /proc/stat - $!"
    );
    while (my $line = <$fh>) {
        if ($line =~ /^cpu\d/) {
            $factor++;
        }
    }
    if ($factor == 0) {
        $plugin->exit(
            status => "UNKNOWN",
            message => "unable to determine the number of CPUs"
        );
    }
}

# --------------------------------------------------
# Load loadavg
# --------------------------------------------------

my $stat = {};

open my $fh, "<", "/proc/loadavg" or $plugin->exit(
    status => "UNKNOWN",
    message => "cannot open /proc/loadavg - $!"
);
($stat->{avg1}, $stat->{avg5}, $stat->{avg15}) = (split /\s+/, <$fh>)[0..2];
close $fh;

# --------------------------------------------------
# Check warning and critical
# --------------------------------------------------

my $result = $plugin->check_thresholds(
    stats => $stat,
    upshot_keys => [qw(avg1 avg5 avg15)],
    factor => $factor
);

$plugin->exit(
    status => $result->{status},
    message => $result->{upshot},
    stats => $stat
);
