#!/usr/bin/perl

=head1 NAME

check-ifstat - Plugin to check network interface load.

=head1 SYNOPSIS

    check-ifstat [ OPTIONS ]

    check-ifstat --help

=head1 REPORTING BUGS

Please report all bugs to <support(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <support(at)bloonix.de>.

=head1 POWERED BY

     _    __ _____ _____ __  __ __ __   __
    | |__|  |     |     |  \|  |__|\  \/  /
    |  . |  |  |  |  |  |      |  | >    <
    |____|__|_____|_____|__|\__|__|/__/\__\

=head1 COPYRIGHT

Copyright (C) 2014 by Jonny Schulz. All rights reserved.

=cut

use strict;
use warnings;
use Bloonix::Plugin;

# --------------------------------------------------
# Plugin options
# --------------------------------------------------

my $plugin = Bloonix::Plugin->new(version => "0.2");

$plugin->has_host(mandatory => 1);
$plugin->has_timeout(default => 30);

# --------------------------------------------------
# Parse options
# --------------------------------------------------

my $opt = $plugin->parse_options;
my $result = {};
my $time = $plugin->runtime;

my $ipc = Bloonix::IPC::Cmd->run(
    command => "mtr --no-dns -trc 3 $opt->{host}",
    timeout => $opt->{timeout},
    kill_signal => 9
);

$time = sprintf("%.3f", $plugin->runtime);

if ($ipc->timeout) {
    $result->{status} = "CRITICAL";
    $result->{message} = "MTR to host $opt->{host} timed out after $opt->{timeout} seconds";
} elsif ($ipc->unknown) {
    $result->{status} = "UNKNOWN";
    $result->{message} = "an unexpected error occurs - ". $ipc->unknown;
} else {
    $result->{status} = "OK";
    $result->{message} = "mtr took ${time}s";
}

my @lines = @{ $ipc->stdout };
my @header = split /\s+/, shift @lines;
my @output;

foreach my $line (@lines) {
    $line =~ s/^\s*//;
    my %data;
    @data{qw(step ipaddr loss snt last avg best wrst stdev)}
        =  split /\s+/, $line;
    $data{step} =~ s/\|.+//;
    $data{loss} =~ s/%//;
    push @output, \%data;
}

$result->{stats} = \@output;
$plugin->exit(%$result);
