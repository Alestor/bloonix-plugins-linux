#!/usr/bin/perl

=head1 NAME

check-nfs3 - Plugin to check NFS v3 client and server statistics.

=head1 SYNOPSIS

    check-nfs3 [ OPTIONS ]

    check-nfs3 --help

=head1 REPORTING BUGS

Please report all bugs to <support(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <support(at)bloonix.de>.

=head1 POWERED BY

     _    __ _____ _____ __  __ __ __   __
    | |__|  |     |     |  \|  |__|\  \/  /
    |  . |  |  |  |  |  |      |  | >    <
    |____|__|_____|_____|__|\__|__|/__/\__\

=head1 COPYRIGHT

Copyright (C) 2012-2014 by Jonny Schulz. All rights reserved.

=cut

use strict;
use warnings;
use Bloonix::Plugin;

# --------------------------------------------------
# Plugin options
# --------------------------------------------------

my $plugin = Bloonix::Plugin->new(version => "0.4");

$plugin->has_threshold(
    keys => [qw(
        getattr setattr lookup access readlink read write
        create mkdir symlink mknod remove rmdir rename link
        readdir readdirplus fsstat fsinfo pathconf commit
    )]
);

$plugin->add_option(
    name => "Check the client instead the server",
    option => "client",
    description => "By default the server is checked. Enable this option if you want to check the client instead the server."
);

# --------------------------------------------------
# Parse options
# --------------------------------------------------

my $opt = $plugin->parse_options;

my $procnfs = $opt->{client}
    ? "/proc/net/rpc/nfs"
    : "/proc/net/rpc/nfsd";

# --------------------------------------------------
# Load statistics
# --------------------------------------------------

sub load {
    my ($file, $client) = @_;
    my %stat = ();

    open my $fh, "<", $file or do {
        $plugin->exit(
            status => "CRITICAL",
            message => join(" ", "nfs3", $client ? "client:" : "server:", "unable to open '$file' - $!")
        );
    };

    while (my $line = <$fh>) {
        if ($line =~ /^proc3\s+(.*)/) {
            @stat{qw(
                getattr setattr lookup access readlink read write
                create mkdir symlink mknod remove rmdir rename link
                readdir readdirplus fsstat fsinfo pathconf commit
            )} = split /\s+/, $1;
        }
    }

    return \%stat;
}

# --------------------------------------------------
# Load initial statistics
# --------------------------------------------------

my $init = $plugin->load_json;
my $time = undef;

if (defined $init) {
    $time = delete $init->{time};
} else {
    $init = &load($procnfs, $opt->{client});
    $time = time;
    sleep 1;
}

# --------------------------------------------------
# Load current statistics
# --------------------------------------------------

my $stat  = &load($procnfs, $opt->{client});
my $ntime = time;
my $delta = $ntime - $time;

# --------------------------------------------------
# Calculate deltas
# --------------------------------------------------

foreach my $key (keys %$stat) {
    my $value = $stat->{$key};

    if ($stat->{$key} == $init->{$key} || $init->{$key} > $stat->{$key}) {
        $stat->{$key} = sprintf("%.2f", 0);
    } elsif ($delta > 0) {
        $stat->{$key} = sprintf("%.2f", ($stat->{$key} - $init->{$key}) / $delta);
    } else {
        $stat->{$key} = sprintf("%.2f", $stat->{$key} - $init->{$key});
    }

    $init->{$key} = $value;
}

# --------------------------------------------------
# Store statistics for the next run
# --------------------------------------------------

$init->{time} = $ntime;
$plugin->safe_json($init);

# --------------------------------------------------
# Check warning and critical
# --------------------------------------------------

my $result = $plugin->check_thresholds(
    stats => $stat,
    upshot_keys => [qw(getattr setattr read write)]
);

$plugin->exit(
    status => $result->{status},
    message => join(" ", "nfs3", $opt->{client} ? "client:" : "server:", "$result->{upshot}"),
    stats => $stat
);
