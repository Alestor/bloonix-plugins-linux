#!/usr/bin/perl

=head1 NAME

check-mdadm - Plugin to check mdadm raids.

=head1 SYNOPSIS

    check-mdadm [ OPTIONS ]

    check-mdadm --help

=head1 REPORTING BUGS

Please report all bugs to <support(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <support(at)bloonix.de>.

=head1 POWERED BY

     _    __ _____ _____ __  __ __ __   __
    | |__|  |     |     |  \|  |__|\  \/  /
    |  . |  |  |  |  |  |      |  | >    <
    |____|__|_____|_____|__|\__|__|/__/\__\

=head1 COPYRIGHT

Copyright (C) 2009-2014 by Jonny Schulz. All rights reserved.

=cut

use strict;
use warnings;
use Bloonix::Plugin;

# --------------------------------------------------
# Plugin options
# --------------------------------------------------

my $plugin = Bloonix::Plugin->new(version => "0.4");
$plugin->flags("sudo");

$plugin->add_option(
    option => "ignore-status-checking",
    name => "Ignore status 'checking'",
    description => "Enable this option to ignore the MD RAID status 'checking'."
);

my $opt = $plugin->parse_options;
my $mdadm = qx{which mdadm};
chomp $mdadm;

if (!$mdadm || !-x $mdadm) {
    $plugin->exit(
        status => "UNKNOWN",
        message => "command 'mdadm' not found"
    );
}

# --------------------------------------------------
# Get mdadm status
# --------------------------------------------------

my $status = "OK";
my (@message, %data);

eval {
    $SIG{__DIE__} = sub { alarm(0) };
    $SIG{ALRM} = sub { die "timeout" };
    alarm(60);

    my @arrays = qx{$mdadm --detail --scan};

    if ($? > 0) {
        print STDERR join(" ", @arrays), "\n";
        $plugin->exit(
            status => "UNKNOWN",
            message => "unable to execute '$mdadm' - please check stderr or the logfile"
        );
    }

    foreach my $array (@arrays) {
        $array = (split /\s+/, $array)[1];

        my %status = (
            state => "unknown",
            active => 0,
            working => 0,
            failed => 0,
            spare => 0,
            resync => 0
        );

        $data{$array} = \%status;
        my @output = qx{$mdadm --detail $array};

        foreach my $output (@output) {
            if ($output =~ /^\s*(Active|Working|Failed|Spare)\s+Devices\s*:\s*(.+)/) {
                my ($key, $value) = (lc($1), $2);
                $status{$key} = $value;
            } elsif ($output =~ /^\s*State\s*:\s*(.+)/) {
                $status{state} = $1;
                $status{state} =~ s/\s\z//;
            } elsif ($output =~ /^\s*Resync\s+Status\s*:\s*(.+)/) {
                $status{resync} = $1;
            }
        }

        if ($status{state} =~ /^(?:active|clean)\s*\z/ || ($opt->{ignore_status_checking} && $status{state} =~ /checking/)) {
            push @message, "[$array state:$status{state}]";
            next;
        }

        push @message, "[$array " . join("; ", map { "$_:$status{$_}" } qw(state active working failed spare resync)) . "]";

        if ($status ne "CRITICAL" && !$status{failed} && $status{state} =~ /resyncing|recovering|dirty|checking/) {
            $status = "WARNING";
        } else {
            $status = "CRITICAL";
        }
    }

    alarm(0);
};

if ($@) {
    $plugin->exit(
        status => "UNKNOWN",
        message => "an unexcepted error occurs: $@"
    );
}

$plugin->exit(
    status => $status,
    message => join(", ", @message),
    stats => \%data
);
