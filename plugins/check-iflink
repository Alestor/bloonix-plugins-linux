#!/usr/bin/perl

=head1 NAME

check-iflink - Plugin to check the link status of a interface.

=head1 SYNOPSIS

    check-iflink [ OPTIONS ]

    check-iflink --help

=head1 REPORTING BUGS

Please report all bugs to <support(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <support(at)bloonix.de>.

=head1 POWERED BY

     _    __ _____ _____ __  __ __ __   __
    | |__|  |     |     |  \|  |__|\  \/  /
    |  . |  |  |  |  |  |      |  | >    <
    |____|__|_____|_____|__|\__|__|/__/\__\

=head1 COPYRIGHT

Copyright (C) 2009-2014 by Jonny Schulz. All rights reserved.

=cut

use strict;
use warnings;
use Bloonix::Plugin;

# --------------------------------------------------
# Plugin options
# --------------------------------------------------

my $plugin = Bloonix::Plugin->new(version => "0.3");

$plugin->add_option(
    name => "Network interface",
    option => "interface",
    value => "interface",
    value_type => "string",
    multiple => 1,
    regex => qr/^[\w\-:]+\z/,
    description => "This is the network interface you want to check. As example eth0 or eth1."
);

$plugin->example(
    description => "A simple example",
    arguments => [
        interface => "eth0",
        interface => "eth1"
    ]
);

# --------------------------------------------------
# Parse options
# --------------------------------------------------

my $opt = $plugin->parse_options;
my $basenet = "/sys/class/net";
my $classnet = "/sys/class/net/%s/carrier";
my @interfaces = ();

if (!@{$opt->{interface}}) {
    opendir my $dh, $basenet or do {
        $plugin->exit(
            status => "UNKNOWN",
            message => "unable to open dir '$basenet' for reading - $!"
        );
    };

    @{$opt->{interface}} = grep /\w/, readdir $dh;
    closedir $dh;
}

# --------------------------------------------------
# Check interfaces
# --------------------------------------------------

my $status = "OK";
my @checked = ();

foreach my $interface (@{$opt->{interface}}) {
    my $file = $classnet;
    $file =~ s/%s/$interface/g;

    if (open my $fh, "<", $file) {
        my $flag = do { local $/; <$fh> };

        if (defined $flag && $flag =~ /^1/) {
            push @checked, "$interface link ok";
        } else {
            $status = "CRITICAL";
            push @checked, "$interface has no link";
        }
    } else {
        $status = "CRITICAL";
        push @checked, "unable to check $interface";
    }
}

if (!@checked) {
    $plugin->exit(
        status => "UNKNOWN",
        message => "no interfaces found to check"
    );
}

$plugin->exit(
    status => $status,
    message => join(", ", @checked)
);
