#!/usr/bin/perl

=head1 NAME

check-gluster-status - Plugin to check the state of gluster.

=head1 SYNOPSIS

    check-gluster-status [ OPTIONS ]

    check-gluster-status --help

=head1 REPORTING BUGS

Please report all bugs to <support(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <support(at)bloonix.de>.

=head1 POWERED BY

     _    __ _____ _____ __  __ __ __   __
    | |__|  |     |     |  \|  |__|\  \/  /
    |  . |  |  |  |  |  |      |  | >    <
    |____|__|_____|_____|__|\__|__|/__/\__\

=head1 COPYRIGHT

Copyright (C) 2009-2014 by Jonny Schulz. All rights reserved.

=cut

use strict;
use warnings;
use Bloonix::Plugin;

# --------------------------------------------------
# Plugin options
# --------------------------------------------------

my $plugin = Bloonix::Plugin->new(version => "0.1");
$plugin->flags("sudo");

$plugin->add_option(
    name => "Number of peers",
    option => "number-of-peers",
    value => "num",
    value_type => "number",
    mandatory => 1,
    default => 1,
    description => "The number of connected peers exptected in the cluster."
);

$plugin->add_option(
    name => "Expect peer",
    option => "peer",
    value => "hostname",
    value_type => "string",
    multiple => 1,
    regex => qr/^[\w\-.]+\z/,
    description => "The expected peers to be connected."
);

# --------------------------------------------------
# Parse options
# --------------------------------------------------

my $opt = $plugin->parse_options;
my $gluster = qx{which gluster};
chomp $gluster;

if (!$gluster || !-x $gluster) {
    foreach my $p ("/sbin/gluster", "/usr/sbin/gluster", "/bin/gluster", "/usr/bin/gluster") {
        if (-x $p) {
            $gluster = $p;
        }
    }
}

if (!$gluster || !-x $gluster) {
    $plugin->exit(
        status => "UNKNOWN",
        message => "command 'gluster' not found"
    );
}

# --------------------------------------------------
# Run
# --------------------------------------------------

my @output = qx{$gluster peer status 2>/dev/null};
chomp @output;

if ($? > 0) {
    $plugin->exit(
        status => "CRITICAL",
        message => "command 'gluster peer status' exited with err code $?"
    );
}

my $number_of_peers = 0;
my $found_host = {};
my $last_host = undef;

foreach my $line (@output) {
    if ($line =~ /^Number of Peers: (\d+)/) {
        $number_of_peers = $1;
    } elsif ($line =~ /^Hostname: (.+)/) {
        $last_host = $1;
    } elsif ($line =~ /^State: (.+)/) {
        $found_host->{$last_host} = $1;
    }
}

if ($number_of_peers != $opt->{number_of_peers}) {
    $plugin->exit(
        status => "CRITICAL",
        message => "peers connected: $number_of_peers; wanted: $opt->{number_of_peers}"
    );
}

if (@{$opt->{peer}}) {
    my @not_connected;
    foreach my $peer (@{$opt->{peer}}) {
        if (!exists $found_host->{$peer}) {
            push @not_connected, "$peer not found";
        } elsif ($found_host->{$peer} !~ /\(Connected\)/i) {
            push @not_connected, "$peer: $found_host->{$peer}";
        }
    }
    if (@not_connected) {
        $plugin->exit(
            status => "CRITICAL",
            message => "peers connected: $number_of_peers; " . join("; ", @not_connected)
        );
    }
}

$plugin->exit(
    status => "OK",
    message => "peers connected: $number_of_peers; peers: " . join(", ", sort keys %$found_host)
);
